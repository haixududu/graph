library(ggplot2)
library(dplyr)


"%||%" <- function(a, b) {
  if (!is.null(a)) a else b
}

geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
                             position = "dodge", trim = TRUE, scale = "area",
                             show.legend = NA, inherit.aes = TRUE, ...) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomFlatViolin,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(
      trim = trim,
      scale = scale,
      ...
    )
  )
}

#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
  ggproto("GeomFlatViolin", Geom,
          setup_data = function(data, params) {
            data$width <- data$width %||%
              params$width %||% (resolution(data$x, FALSE) * 0.9)
            
            # ymin, ymax, xmin, and xmax define the bounding rectangle for each group
            data %>%
              group_by(group) %>%
              mutate(ymin = min(y),
                     ymax = max(y),
                     xmin = x,
                     xmax = x + width / 2)
          },
          
          draw_group = function(data, panel_scales, coord) {
            # Find the points for the line to go all the way around
            data <- transform(data, xminv = x,
                              xmaxv = x + violinwidth * (xmax - x))
            
            # Make sure it's sorted properly to draw the outline
            newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
                             plyr::arrange(transform(data, x = xmaxv), -y))
            
            # Close the polygon: set first and last point the same
            # Needed for coord_polar and such
            newdata <- rbind(newdata, newdata[1,])
            
            ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
          },
          
          draw_key = draw_key_polygon,
          
          default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
                            alpha = NA, linetype = "solid"),
          
          required_aes = c("x", "y")
  )  


dev.new (title="", width=10, height=8, noRStudioGD = TRUE)
setwd("C:/Users/Zhang Mengying/Desktop/Recognition")
library(readxl)
data<- read_excel("four.xlsx")
head(data)
data<- data[, c(1:5)]
df<-reshape2:::melt(data, id='sample')
head(df)


p1 <-  
  ggplot(df, aes(x= variable, y= value,fill= variable, colour= variable))+ 
  geom_flat_violin(position= position_nudge (x=.20, y= 0), adjust = 2, trim = FALSE)+
  geom_point(position = position_jitter(width= 0.1), size= 2, shape= 19, alpha= 0.8)+
  geom_boxplot(aes(x= as.numeric(variable)+0.20, y= value), outlier.shape = NA, alpha = 0.8,
               width= .10, size = 0.8,
               colour="BLACK")+
  scale_fill_manual(values = c("fullfull" ="#eaaa81", "maskedpartial"="#ffa07a", "fullpartial" = "#a0c0b1", "maskedfull" = "#53868b"))+
  scale_color_manual(values= c("fullfull"="#da6d35","maskedpartial"="#ee7600", "fullpartial" = "#289e78", "maskedfull" = "#66cdaa"))+
  scale_y_continuous(limits= c(0,1), breaks = seq(0,1,0.1))+
  labs(x=" ", y="Accuracy")+
  ggtitle(" ")+
  theme_bw()+
  theme(legend.position ="",
        panel.grid = element_blank())+
  theme(axis.title.x = element_text(color ="black", size=18),
        axis.title.y= element_text(color="black", size =18),
        axis.text = element_text(color ="black", size = 16))+
  theme(panel.border = element_rect(colour ="black",size =.9))
p1




